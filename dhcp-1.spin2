{
    --------------------------------------------
    Filename: LAN8720-Demo.spin2
    Author: Jesse Burt
    Description: Demo of the LAN8720 driver (P2 version)
    Copyright (c) 2023
    Started Jan 16, 2023
    Updated Jan 16, 2023
    See end of file for terms of use.
    --------------------------------------------
}
#include "net-common.spin2h"

CON

    _xtlfreq    = 20_000_000
    _clkfreq    = 200_000_000

' -- User-modifiable constants
    SER_BAUD    = 2_000_000

    { LAN8720 }
    BASE        = 16                            ' base pin (0, 8, 16, 24, 32, 40, 48, 56)

    { set ICMP echo data buffer size to accommodate a particular implementation
       of the 'ping' utility on the remote node 
       can be WINDOWS_PING (32), LINUX_PING (48) or any arbitrary number }
    ICMP_DAT_LEN= LINUX_PING

' --

    LINUX_PING  = 48
    WINDOWS_PING= 32

    { DHCP states }
    INIT        = 0
    SELECTING   = 1
    REQUESTING  = 2
    INIT_REBOOT = 3
    REBOOTING   = 4
    BOUND       = 5
    RENEWING    = 6
    REBINDING   = 7

    TXSTART     = 0

OBJ

    ser: "com.serial.terminal.ansi"
    net: "net.eth.p2-lan8720a"
    svc: "services.spin2h"
    math:   "math.int"

VAR

    long _ip_st
    long _my_ip
    long _dly, _timer_set, _udp_st

    long _tmr_stack[50]

    byte _txbuff[net.MTU_MAX]
    byte _icmp_data[ICMP_DAT_LEN]
    byte _dhcp_state

DAT

    { this node's MAC address }
    _mac_local  byte    $00,$04,$a3,$46,$97,$e1

    { DHCP parameters to request }
    _dhcp_params
        byte net.IP_LEASE_TM
        byte net.DEF_IP_TTL
        byte net.DNS
        byte net.ROUTER
        byte net.SUBNET_MASK

pub main

    setup()

    _dly := 4
    _dhcp_state := INIT
    net.fifo_set_wr_ptr(0)
    net.reset_bootp()
    repeat
        case _dhcp_state
            INIT:
                net.bootp_set_xid(math.rndi(posx) & $7fff_fff0)
                _dhcp_state++
            SELECTING:
                dhcp_msg(net.DHCPDISCOVER)
                repeat
                    if (net.pkt_cnt())          ' pkt received?
                        get_frame()
                        if (process_ethii() == net.DHCPOFFER)
                            { offer received from DHCP server; request it }
                            _dhcp_state := REQUESTING
                            quit                ' got an offer; next state
                while _timer_set
                if (_dhcp_state == SELECTING)
                    { timer expired without a response; double the delay time
                        +/- 1sec, up to 64secs, until the next attempt }
                    if (_dly < 64)
                        _dly *= 2
                    net.bootp_inc_xid()
                    ser.strln(@"No response - retrying")
                else
                    _dly := 4                   ' reset delay time
            REQUESTING:
                dhcp_msg(net.DHCPREQUEST)
                repeat
                    if (net.pkt_cnt())
                        get_frame()
                        if (process_ethii() == net.DHCPACK)
                            { server acknowledged request; we're now bound
                                to this IP }
                            _dhcp_state := BOUND
                            quit
                while _timer_set
                if (_dhcp_state == REQUESTING)
                    if (_dly < 64)
                        _dly *= 2
            BOUND:
                if (_my_ip == 0)
                    _my_ip := net.bootp_your_ip()
                    ser.fgcolor(ser.LTGREEN)
                    show_ip_addr(@"IP: ", _my_ip, 0)
                    ser.fgcolor(ser.GREY)
                    ser.newline()
                    { set a timer for the lease expiry }
                    _timer_set := net.dhcp_ip_lease_time()
                ifnot (_timer_set)
                    { when the lease timer expires, reset everything back
                        to the initial state and try to get a new lease }
                    _my_ip := 0
                    _dhcp_state := INIT
                if (net.pkt_cnt())
                    { if any frames are received, process them; they might be
                        the server sending ARP requests confirming we're
                        bound to the IP }
                    get_frame()
                    process_ethii()

{    repeat
        get_frame()
        process_ethii()
}
PUB dhcp_msg(msg_t) | tmp
' Construct a DHCP message, and transmit it
    tmp := 0

    start_frame()
    net.ethii_new(@_mac_local, @_mac_bcast, ETYP_IPV4)
    _ip_st := net.fifo_wr_ptr()
    net.ipv4_new(net.UDP, $00_00_00_00, BCAST_IP)
    _udp_st := net.fifo_wr_ptr()
    net.udp_new(svc.BOOTP_C, svc.BOOTP_S)

    net.dhcp_set_ip_lease_time(120)
    net.dhcp_new(msg_t, @_dhcp_params, 5)

    { update UDP header with length: UDP header + DHCP message }
    tmp := net.fifo_wr_ptr()
    net.fifo_set_wr_ptr(_udp_st+net.UDP_DGRAMLEN)
    net.wrword_msbf(net.udp_hdr_len() + net.dhcp_msg_len())
    net.fifo_set_wr_ptr(tmp)

    { update IP header with length and checksum }
    ipv4_updchksum(net.ip_hdr_len() + net.udp_hdr_len() + net.dhcp_msg_len())
    ser.hexdump(@_txbuff+4, 0, 4, 400, 16)
    ser.printf(@"getat(): %02.2x\n\r", net.getat(net.IP_ABS_ST+net.IP_CKSUM))
'    repeat
    send_frame()

    _timer_set := (_dly + (math.rndi(2)-1)) <# 64 ' start counting down

PUB get_frame() | ptr, len

    repeat while ( net.rx_put_cnt() == net.rx_get_cnt() )

PUB ipv4_reply(): pos
' Set up/write IPv4 header as a reply to last received header
    net.ip_set_hdr_chk(0)                         ' init header checksum to 0
    _ip_st := net.fifo_wr_ptr()
    net.ipv4_new(net.ip_l4_proto(), _my_ip, net.ip_src_addr())
    return net.fifo_wr_ptr()

PUB ipv4_updchksum(length) | ptr_tmp, tmp
' Update IP header with checksum
    ptr_tmp := net.fifo_wr_ptr()                ' cache current pointer

    { update IP header with specified length and calculate checksum }
    net.ip_set_dgram_len(length)
    net.fifo_set_wr_ptr(_ip_st + net.IP_TLEN)
    net.wrword_msbf(net.ip_dgram_len())
    ser.printf(@"ck_st = %d\n\r", net.IP_ABS_ST)
    tmp := net.inet_chksum(net.IP_ABS_ST, net.IP_ABS_ST+net.IP_HDR_SZ, net.IP_ABS_ST+net.IP_CKSUM)
    ser.printf(@"checksum was: %08.8x\n\r", tmp)
    net.fifo_set_wr_ptr(ptr_tmp)                         ' restore pointer pos

PUB process_arp() | opcode
' Process ARP message
    net.rd_arp_msg()
    show_arp_msg(net.arp_opcode())
{    if (net.arp_opcode() == net.ARP_REQ)
        { if we're currently bound to an IP, and the ARP request is for
            our IP, send a reply confirming we have it }
        if ( (_dhcp_state >= BOUND) and (net.arp_target_proto_addr() == _my_ip) )
            { reply }
            start_frame()
            net.ethii_reply()
            net.arp_reply()
            send_frame()
            show_arp_msg(net.arp_opcode())
}
PUB process_bootp()
' Process BOOTP/DHCP message
    net.rd_bootp_msg()
    { BOOTP reply? }
    if (net.bootp_opcode() == net.BOOT_REPL)
        if (net.dhcp_msg_type() == net.DHCPOFFER)
            return net.DHCPOFFER
        if (net.dhcp_msg_type() == net.DHCPACK)
            return net.DHCPACK

PUB process_ethii(): msg_t | ether_t
' Process Ethernet-II frame
    net.rd_ethii_frame()
    ether_t := net.ethii_ethertype()
    { route to the processor appropriate to the ethertype }
    if (ether_t == ETYP_ARP)
    { ARP }
        process_arp()
    elseif (ether_t == ETYP_IPV4)
    { IPv4 }
        msg_t := process_ipv4()

PUB process_icmp() | icmp_st, frm_end, icmp_end
' Process ICMP messages
    { if this node is bound to an IP and the echo request was directed to it, }
    {   send a reply }
    net.rd_icmp_msg()
    if ( net.icmp_msg_type() == net#ECHO_REQ )
        { ECHO request (ping) }
        net.rdblk_lsbf(@_icmp_data, ICMP_DAT_LEN)     ' read in the echo data
        if ( (_dhcp_state >= BOUND) and (net.ip_dest_addr() == _my_ip) )
            start_frame()
            net.ethii_reply()
            icmp_st := ipv4_reply()-TXSTART-1

            net.icmp_echo_reply()

            { echo the data that was received in the ping/echo request }
            net.wrblk_lsbf(@_icmp_data, ICMP_DAT_LEN)
            frm_end := net.fifo_wr_ptr()

            ipv4_updchksum(net.ip_hdr_len() + net.icmp_msg_len() + ICMP_DAT_LEN)

            icmp_end := net.fifo_wr_ptr()-TXSTART

            { update ICMP checksum }
            net.inet_chksum(icmp_st, icmp_end, icmp_st+net#ICMP_CKSUM)
            net.fifo_set_wr_ptr(frm_end)

            send_frame()
            ser.fgcolor(ser#GREEN)
            ser.strln(@"PING!")
            ser.fgcolor(ser#GREY)

PUB process_ipv4(): msg
' Process IPv4 datagrams
    net.rd_ip_header()
    case net.ip_l4_proto()
        { UDP? }
        net.UDP:
            net.rd_udp_header()
            { BOOTP? }
            if (net.udp_dest_port() == svc.BOOTP_C)
                msg := process_bootp()
        net.TCP:
#ifdef TCP_TEL
            process_tcp()
#endif
        net.ICMP:
            process_icmp()

PUB send_frame() | sz

    ser.strln(@"send_frame()")
    sz := net.fifo_wr_ptr()
    ser.printf(@"sz = %d\n\r", sz)
    net.fifo_set_wr_ptr(0)                      ' tell the driver the size of the frame
    net.wrlong_lsbf(sz)

    net.tx_ena(true)
    ser.strln(@"send_frame() ret")

PUB start_frame()

    net.fifo_set_wr_ptr(4)

PRI cog_timer()

    repeat
        repeat until _timer_set                 ' wait for a timer to be set
        repeat                                  ' wait 1s each loop
            waitms(1_000)
        while --_timer_set                      ' until timer expired

PUB setup() | try

    ser.start(SER_BAUD)
    ser.clear()
    ser.strln(@"Serial terminal started")

    cogspin(NEWCOG, cog_timer(), @_tmr_stack)

    net.node_address(@_mac_local)
    show_mac_addr(@"MAC address: ", @_mac_local, string(10, 13))
    net.init(@_txbuff)
    net.startx(BASE)

    ser.str(@"waiting for link...")
    repeat try from 1 to 50
        waitms (100)
        if net.link_status()
            ser.strln(@"up")
            return
    ser.str(@"failed")
    repeat


#include "net-display-utils.spin2"

DAT
{
Copyright 2023 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

